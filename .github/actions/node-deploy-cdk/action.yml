name: Deploy CDK
description: Deploy CDK
inputs:
  node-version:
    description: Node.js version to use
    required: false
    default: 16.x
  aws-access-key-id:
    description: AWS Access Key ID
    required: true
  aws-secret-access-key:
    description: AWS Access Key Secret
    required: true
  aws-region:
    description: AWS region to deploy to
    required: true
  infrastructure-artifact-name:
    description: Name of infrastructure artifact
    default: infrastructure
    required: false
  app-artifact-unzips:
    description: |
      One or more (lines) of colon-separated pairs, indicating A) artifact name B) destination folder where the artifact is unzipped prior to running CDK commands. E.g.:
      app-artifact-unzips: |-
        website:website/build
        app:app/dist
        poller:poller/build
    default: website:website/build
    required: false
  static-site-transforms:
    description: |
      One or more (lines) of colon-separated pairs, indicating A) placeholder variable value used in static site build B) secret value to replace placeholder value with throughout the build E.g.:
      static-site-transforms: |-
        VITE_MAKER_GRAPH_API_ENDPOINT:SECRET VALUE
        VITE_CLIENT_ID:SECRET VALUE
        VITE_TENANT_ID:SECRET VALUE
    required: false

runs:
  using: composite
  steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Unzip infrastructure artifact
      run: unzip -q artifacts/${{ inputs.infrastructure-artifact-name }}/${{ inputs.infrastructure-artifact-name }}.zip -d ${{ inputs.infrastructure-artifact-name }}
      shell: bash

    - name: Rebuild infrastructure node_modules
      shell: bash
      run: npm rebuild && npm run prepare --if-present
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: Unzip app artifacts
      run: |
        # Configure static site transforms if provided
        if [ ! -z "${{ inputs.static-site-transforms }}" ]
        then
          readarray -t transforms <<<"${{ inputs.static-site-transforms }}"
          replacements=""
          for i in "${!transforms[@]}"
          do
            trimmed="$(echo -e "${transforms[i]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
            IFS=':' read -r placeholder value <<< "$trimmed"
            if [ ! -z "$placeholder" ]
            then
              replacements+="s/{{$placeholder}}/$(echo $value | sed -e 's/\\/\\\\/g; s/\//\\\//g; s/&/\\\&/g')/gI;"
            fi
          done

          # Extract app artifacts
          readarray -t lines <<<"${{ inputs.app-artifact-unzips }}"
          for i in "${!lines[@]}"
          do
            trimmed="$(echo -e "${lines[i]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
            IFS=':' read -ra pair <<< "$trimmed"
            mkdir -p "${pair[1]}"
            unzip -q "artifacts/${pair[0]}/${pair[0]}.zip" -d "${pair[1]}"
  
            # Apply static site transforms if provided 
            if [ ! -z "$replacements" ]
            then
              find "${pair[1]}" -type f \( -name '*.js' -o -name '*.html' \) -exec sed -i "$replacements" {} \;
            fi
          done
        fi
      shell: bash

    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: CDK bootstrap
      shell: bash
      run: npm run bootstrap
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: CDK diff
      shell: bash
      run: npm run diff
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: CDK deploy
      shell: bash
      run: npm run deploy --if-present
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: CDK deploy infra
      shell: bash
      run: npm run deploy-infra --if-present
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: Set secrets (infra)
      shell: bash
      run: npm run set-secrets --if-present
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: Run DB Migrations
      shell: bash
      run: npm run invoke-migrate-db --if-present
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: CDK deploy app
      shell: bash
      run: npm run deploy-app --if-present
      working-directory: ${{ inputs.infrastructure-artifact-name }}

    - name: Set secrets (app)
      shell: bash
      run: npm run set-secrets --if-present
      working-directory: ${{ inputs.infrastructure-artifact-name }}
